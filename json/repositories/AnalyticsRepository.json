{
  "class_name": "AnalyticsRepository",
  "table": "sales",
  "summary": "Menyediakan metode untuk agregasi dan analisis data penjualan.",
  "description": "Repositori ini tidak mengelola entitas tunggal, melainkan melakukan kueri kompleks terhadap tabel `sales` dan tabel terkait lainnya untuk menghasilkan statistik dan ringkasan analitik.",
  "methods": [
    {
      "name": "__construct",
      "description": "Menginisialisasi repositori dengan koneksi PDO.",
      "parameters": [
        {
          "name": "pdo",
          "type": "PDO",
          "description": "Objek koneksi database."
        }
      ]
    },
    {
      "name": "getGlobalSummary",
      "description": "Mengambil ringkasan penjualan global, termasuk total penjualan dan total pendapatan dari seluruh transaksi.",
      "parameters": [],
      "logic": "SELECT COUNT(id) as total_sales, SUM(price) as total_revenue FROM sales",
      "returns": "array",
      "return_description": "Array dengan kunci `total_sales` dan `total_revenue`."
    },
    {
      "name": "getUserPurchaseStats",
      "description": "Menghitung total pembelian dan total uang yang dibelanjakan oleh seorang pengguna (pembeli).",
      "parameters": [
        {
          "name": "buyer_user_id",
          "type": "int",
          "description": "ID internal pengguna pembeli."
        }
      ],
      "logic": "SELECT COUNT(id) as total_purchases, SUM(price) as total_spent FROM sales WHERE buyer_user_id = ?",
      "returns": "array",
      "return_description": "Array dengan kunci `total_purchases` dan `total_spent`."
    },
    {
      "name": "getSellerSummary",
      "description": "Menghitung total penjualan dan total pendapatan untuk seorang penjual.",
      "parameters": [
        {
          "name": "seller_user_id",
          "type": "int",
          "description": "ID internal pengguna penjual."
        }
      ],
      "logic": "SELECT COUNT(id) as total_sales, SUM(price) as total_revenue FROM sales WHERE seller_user_id = ?",
      "returns": "array",
      "return_description": "Array dengan kunci `total_sales` dan `total_revenue`."
    },
    {
      "name": "getSalesByDay",
      "description": "Mengambil data agregat penjualan per periode waktu (harian atau bulanan) untuk grafik atau laporan. Dapat memfilter berdasarkan penjual dan paket.",
      "parameters": [
        {
          "name": "seller_user_id",
          "type": "?int",
          "description": "Filter berdasarkan ID penjual (opsional)."
        },
        {
          "name": "days",
          "type": "int",
          "description": "Jumlah hari ke belakang untuk dianalisis (default 30)."
        },
        {
          "name": "packageId",
          "type": "?int",
          "description": "Filter berdasarkan ID paket (opsional)."
        }
      ],
      "logic": "Agregasi dinamis: harian jika `days <= 90`, bulanan jika `days > 90`. Kueri dibangun secara dinamis untuk menyertakan filter opsional.",
      "returns": "array",
      "return_description": "Array dari objek yang berisi `sales_date` dan `daily_revenue`."
    },
    {
      "name": "getTopSellingPackages",
      "description": "Mengambil daftar paket terlaris secara global berdasarkan jumlah penjualan dan total pendapatan.",
      "parameters": [
        {
          "name": "limit",
          "type": "int",
          "description": "Jumlah paket teratas yang akan diambil (default 5)."
        }
      ],
      "logic": "SELECT p.id, p.description, COUNT(s.id) as sales_count, SUM(s.price) as total_revenue FROM sales s JOIN media_packages p ON s.package_id = p.id GROUP BY p.id ORDER BY sales_count DESC, total_revenue DESC LIMIT ?",
      "returns": "array",
      "return_description": "Array dari paket terlaris dengan detailnya."
    },
    {
      "name": "getTopSellingPackagesForSeller",
      "description": "Mengambil daftar paket terlaris untuk seorang penjual spesifik.",
      "parameters": [
        {
          "name": "seller_user_id",
          "type": "int",
          "description": "ID internal pengguna penjual."
        },
        {
          "name": "limit",
          "type": "int",
          "description": "Jumlah paket teratas yang akan diambil (default 5)."
        }
      ],
      "logic": "SELECT p.id, p.public_id, p.description, COUNT(s.id) as sales_count, SUM(s.price) as total_revenue FROM sales s JOIN media_packages p ON s.package_id = p.id WHERE s.seller_user_id = ? GROUP BY p.id ORDER BY sales_count DESC, total_revenue DESC LIMIT ?",
      "returns": "array",
      "return_description": "Array dari paket terlaris milik penjual."
    },
    {
      "name": "getSummaryForPackage",
      "description": "Menghitung total penjualan dan pendapatan untuk satu paket spesifik.",
      "parameters": [
        {
          "name": "packageId",
          "type": "int",
          "description": "ID internal paket."
        }
      ],
      "logic": "SELECT COUNT(id) as total_sales, SUM(price) as total_revenue FROM sales WHERE package_id = ?",
      "returns": "array",
      "return_description": "Array dengan kunci `total_sales` dan `total_revenue` untuk paket tersebut."
    },
    {
      "name": "getRecentSalesForPackage",
      "description": "Mengambil daftar transaksi penjualan terbaru untuk satu paket spesifik.",
      "parameters": [
        {
          "name": "packageId",
          "type": "int",
          "description": "ID internal paket."
        },
        {
          "name": "limit",
          "type": "int",
          "description": "Jumlah penjualan terbaru yang akan diambil (default 10)."
        }
      ],
      "logic": "SELECT s.purchased_at, s.price, u.username as buyer_username FROM sales s JOIN users u ON s.buyer_user_id = u.id WHERE s.package_id = ? ORDER BY s.purchased_at DESC LIMIT ?",
      "returns": "array",
      "return_description": "Array dari penjualan terbaru, termasuk waktu pembelian, harga, dan username pembeli."
    }
  ],
  "notes": "Repositori ini berfokus pada kueri agregat untuk tujuan analitik dan pelaporan."
}