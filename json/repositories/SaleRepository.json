{
  "class_name": "SaleRepository",
  "table": "sales",
  "summary": "Mengelola data transaksi penjualan.",
  "description": "Repositori ini bertanggung jawab untuk mencatat setiap transaksi penjualan yang berhasil. Ia juga menyediakan metode untuk memeriksa riwayat pembelian seorang pengguna.",
  "methods": [
    {
      "name": "__construct",
      "description": "Menginisialisasi repositori dengan koneksi PDO.",
      "parameters": [
        {
          "name": "pdo",
          "type": "PDO",
          "description": "Objek koneksi database."
        }
      ]
    },
    {
      "name": "hasUserPurchased",
      "description": "Memeriksa apakah seorang pengguna sudah pernah membeli sebuah paket.",
      "parameters": [
        {
          "name": "package_id",
          "type": "int",
          "description": "ID internal paket."
        },
        {
          "name": "user_id",
          "type": "int",
          "description": "ID internal pengguna."
        }
      ],
      "logic": "`SELECT id FROM sales WHERE package_id = ? AND buyer_user_id = ?`",
      "returns": "bool",
      "return_description": "`true` jika catatan penjualan ditemukan, jika tidak `false`."
    },
    {
      "name": "createSale",
      "description": "Membuat catatan penjualan baru dan memperbarui saldo pembeli/penjual. Harus dijalankan di dalam transaksi.",
      "parameters": [
        {
          "name": "package_id",
          "type": "int",
          "description": "ID paket yang terjual."
        },
        {
          "name": "seller_user_id",
          "type": "int",
          "description": "ID pengguna penjual."
        },
        {
          "name": "buyer_user_id",
          "type": "int",
          "description": "ID pengguna pembeli."
        },
        {
          "name": "price",
          "type": "float",
          "description": "Harga pada saat penjualan."
        }
      ],
      "logic": "Melakukan UPDATE pada saldo penjual dan pembeli, lalu INSERT ke tabel sales.",
      "returns": "bool"
    },
    {
      "name": "findPackagesByBuyerId",
      "description": "Menemukan semua paket yang telah dibeli oleh seorang pengguna.",
      "parameters": [
        {
          "name": "buyer_user_id",
          "type": "int",
          "description": "ID internal pengguna."
        }
      ],
      "logic": "`SELECT s.purchased_at, mp.* FROM sales s JOIN media_packages mp ON s.package_id = mp.id WHERE s.buyer_user_id = ?`",
      "returns": "array"
    },
    {
      "name": "countSalesForPackage",
      "description": "Menghitung jumlah penjualan untuk sebuah paket spesifik.",
      "params": [
        {
          "name": "package_id",
          "type": "int"
        }
      ],
      "return": {
        "type": "int"
      }
    },
    {
      "name": "createSubscriptionSale",
      "description": "Membuat catatan transaksi untuk penjualan langganan, yang tidak terikat pada satu paket.",
      "params": [
        {
          "name": "seller_user_id",
          "type": "int"
        },
        {
          "name": "buyer_user_id",
          "type": "int"
        },
        {
          "name": "price",
          "type": "float"
        }
      ],
      "return": {
        "type": "bool"
      }
    }
  ]
}
  ]
}
