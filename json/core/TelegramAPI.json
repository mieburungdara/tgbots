{
  "class_name": "TelegramAPI",
  "summary": "Kelas pembungkus (wrapper) untuk semua interaksi dengan Telegram Bot API.",
  "description": "Kelas ini menyediakan serangkaian metode yang menyederhanakan proses pengiriman permintaan ke endpoint Telegram Bot API. Setiap metode merepresentasikan sebuah aksi spesifik, seperti mengirim pesan atau mengedit pesan. Kelas ini juga menangani logging error API ke database, menyertakan mekanisme percobaan ulang otomatis untuk kesalahan rate limiting (HTTP 429), dan mengimplementasikan circuit breaker sederhana per-bot untuk mencegah overloading API yang sedang bermasalah.",
  "properties": [
    {
      "name": "failure_count",
      "type": "int",
      "description": "Konter kegagalan berurutan untuk circuit breaker."
    },
    {
      "name": "circuit_breaker_open_until",
      "type": "int",
      "description": "Waktu (timestamp) kapan circuit breaker akan terbuka kembali."
    },
    {
      "name": "max_failures",
      "type": "int",
      "description": "Jumlah kegagalan maksimum sebelum circuit breaker terbuka."
    },
    {
      "name": "reset_timeout",
      "type": "int",
      "description": "Durasi (detik) circuit breaker akan tetap terbuka."
    }
  ],
  "methods": [
    {
      "name": "__construct",
      "description": "Menginisialisasi API dengan token bot yang diperlukan untuk otentikasi dan objek PDO untuk logging error.",
      "parameters": [
        {"name": "token", "type": "string", "description": "Token otentikasi bot dari BotFather."},
        {"name": "pdo", "type": "PDO", "description": "Objek koneksi database untuk mencatat error.", "is_dependency": true}
      ]
    },
    {
      "name": "sendMessage",
      "description": "Mengirim pesan teks. Ini adalah salah satu metode yang paling sering digunakan.",
      "returns": "Array. Berisi objek Message jika berhasil."
    },
    {
      "name": "sendLongMessage",
      "description": "Mengirim pesan teks yang panjang dengan memecahnya menjadi beberapa pesan jika melebihi batas 4096 karakter Telegram, dipecah berdasarkan baris baru.",
      "returns": "Array. Berisi respons dari pesan terakhir yang dikirim."
    },
    {
      "name": "answerCallbackQuery",
      "description": "Mengirim respons untuk `callback_query` yang diterima (misalnya, setelah pengguna menekan tombol inline). Ini memberikan feedback visual kepada pengguna.",
      "returns": "Array. Berisi `true` jika berhasil."
    },
    {
      "name": "editMessageText",
      "description": "Mengubah konten teks dari pesan yang sudah ada. Berguna untuk memperbarui informasi tanpa mengirim pesan baru.",
      "returns": "Array. Berisi objek Message yang telah diperbarui jika berhasil."
    },
    {
      "name": "editMessageReplyMarkup",
      "description": "Mengubah hanya bagian tombol (keyboard inline) dari pesan yang sudah ada, tanpa mengubah teksnya.",
      "returns": "Array. Berisi objek Message yang telah diperbarui jika berhasil."
    },
    {
      "name": "copyMessage",
      "description": "Menyalin sebuah pesan dari satu chat ke chat lain. Berguna untuk mem-forward konten ke channel atau backup.",
      "returns": "Array. Berisi `message_id` dari pesan yang baru dibuat jika berhasil."
    },
    {
      "name": "getChatMember",
      "description": "Mendapatkan informasi tentang status seorang pengguna di dalam sebuah chat (misalnya, admin, anggota, atau diblokir).",
      "returns": "Array. Berisi objek ChatMember."
    },
    {
      "name": "getChat",
      "description": "Mendapatkan informasi detail tentang sebuah chat, seperti judul, tipe, atau jumlah anggota.",
      "returns": "Array. Berisi objek Chat."
    },
    {
      "name": "getMe",
      "description": "Menguji token bot dan mendapatkan informasi dasar tentang bot itu sendiri.",
      "returns": "Array. Berisi objek User yang merepresentasikan bot."
    },
    {
      "name": "setWebhook",
      "description": "Mendaftarkan URL endpoint di mana Telegram akan mengirimkan pembaruan (update) setiap kali ada interaksi dengan bot.",
      "returns": "Array. Berisi `true` jika berhasil."
    },
    {
      "name": "deleteWebhook",
      "description": "Menghapus pendaftaran webhook, mengalihkan bot kembali ke mode `getUpdates` (polling).",
      "returns": "Array. Berisi `true` jika berhasil."
    },
    {
      "name": "sendNotification",
      "description": "Mengirim pesan notifikasi menggunakan bot Telegram terpisah. Digunakan untuk memberi tahu admin tentang peristiwa penting seperti circuit breaker yang terbuka atau tertutup.",
      "parameters": [
        {
          "name": "message",
          "type": "string",
          "description": "Pesan notifikasi yang akan dikirim."
        }
      ],
      "returns": "void"
    },
    {
      "name": "escapeMarkdown",
      "description": "Membersihkan string dari karakter-karakter yang memiliki arti khusus di `MarkdownV2` Telegram untuk mencegah error parsing.",
      "returns": "String yang aman untuk digunakan dalam mode `MarkdownV2`."
    },
    {
      "name": "escapeHtml",
      "description": "Mengonversi karakter khusus HTML (seperti `<`, `>`, `&`) menjadi entitas HTML agar dapat ditampilkan sebagai teks biasa.",
      "returns": "String yang aman untuk digunakan dalam mode `HTML`."
    }
  ],
  "note": "Detail lengkap untuk parameter setiap metode dapat ditemukan di dokumentasi resmi Telegram Bot API. File ini hanya memberikan ringkasan."
}